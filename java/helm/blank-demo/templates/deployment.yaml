kind: Deployment
apiVersion: extensions/v1beta1
metadata:
  name: {{  .Chart.Name  }}
  labels:
{{ include "service.labels.standard" . | indent 4 }}
spec:
  minReadySeconds: 10
  revisionHistoryLimit: 5
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:    
{{ include "service.match.labels" . | indent 6 }}
  strategy:
    type: {{ .Values.deploymentUpdate.type }}
    {{- if eq .Values.deploymentUpdate.type "RollingUpdate" }}
    rollingUpdate:
      maxSurge: {{ .Values.deploymentUpdate.maxSurge }}
      maxUnavailable: {{ .Values.deploymentUpdate.maxUnavailable }}
    {{- else }}
    rollingUpdate: null
    {{- end}}
  template:
    metadata:
      labels:
{{ include "service.labels.standard" . | indent 8 }}
{{ include "service.microservice.labels" . | indent 8 }}
    spec:
      containers:
      - name: {{  .Chart.Name  }}    
        image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        env:
{{- range $name, $value := .Values.env }}
{{- if ne (len ($value | quote)) 0 }}
          - name: {{ $name | quote }}
            value: {{ $value | quote }}
{{- end }}
{{- end }}
        readinessProbe:
          initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
          successThreshold: {{ .Values.readinessProbe.successThreshold }}
          failureThreshold: {{ .Values.readinessProbe.failureThreshold }}        
          tcpSocket:
            port: {{ .Values.service.ports.http.port }}        
        livenessProbe:
          initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
          successThreshold: {{ .Values.livenessProbe.successThreshold }}
          failureThreshold: {{ .Values.livenessProbe.failureThreshold }}     
          tcpSocket:
            port: {{ .Values.service.ports.http.port }}          
        ports:
        - name: http
          containerPort: {{ .Values.service.ports.http.port }}
          protocol: TCP
        resources:
{{ toYaml .Values.resources | indent 12 }}
        volumeMounts:
          - mountPath: /etc/localtime
            name: time
            readOnly: true
        workingDir: /
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
{{- end }}
{{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
{{- end }}
{{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
{{- end }}
      volumes:
        - hostPath:
            path: /etc/localtime
          name: time
